import numpy as np
import pandas as pd
import math


#Setting up data

auto_data = pd.read_excel('C:\\Users\\Srivatsa\\Downloads\\Inputfiles\\auto_mpg.xlsx')
auto_data.columns = ['mpg',
'cylinders',
'displacement',
'horsepower',
'weight',
'acceleration',
'model year',
'origin',
'car name']
mpg = auto_data['mpg']
del auto_data['mpg']
auto_data['mpg'] = mpg

eighty_percent_data = auto_data[0:math.floor(0.8*(len(auto_data)-1))]
twenty_percent_data = auto_data[math.floor(0.8*(len(auto_data)-1)):]

training_data = eighty_percent_data[['acceleration','mpg']]
testing_data = twenty_percent_data[['acceleration','mpg']]


def compute_error(b, m, points):
    totalError = 0
    for i in range(len(points)):
        x = points[i, 0]
        y = points[i, 1]
        totalError += (y - (m * x + b)) ** 2
        return totalError / float(len(points))

def gradient_descent_runner(points,initial_b,initial_m,learning_rate,num_iterations):
    b = initial_b
    m = initial_m
    for i in range(num_iterations):
        b,m = step_gradient(b,m,np.array(points),learning_rate)
    return [b,m]


def step_gradient(b_current, m_current, points, learning_rate):
    b_gradient = 0
    m_gradient = 0
    N = float(len(points))
    for i in range(len(points)):
        x = points[i, 0]
        y = points[i, 1]

        b_gradient += (-2 / N) * (y - (m_current * x + b_current))
        m_gradient += (-2 / N) * x * (y - (m_current * x + b_current))
    new_b = b_current - (learning_rate * b_gradient)
    new_m = m_current - (learning_rate * m_gradient)
    return new_b, new_m


def run():
    points = np.array(training_data)
    initial_b = 0
    initial_m = 0
    learning_rate = 0.0001
    num_iterations = 1000

    print('Starting gradient descent at b = {0}, m = {1} and error = {2}'.format(initial_b, initial_m,
                                                                                 compute_error(initial_b, initial_m,
                                                                                               points)))
    print('running..')
    [b, m] = gradient_descent_runner(points, initial_b, initial_m, learning_rate, num_iterations)
    print('After {0} iterations, b = {1}, m = {2}, error = {3}'.format(num_iterations, b, m, compute_error(b, m, points)))


if __name__ == '__main__':
    run()
