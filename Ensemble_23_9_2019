{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 413,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.preprocessing import MinMaxScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 414,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('C:\\\\Users\\\\Srivatsa\\\\Desktop\\\\Great_Lakes\\\\Datasets\\\\bank-full.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 415,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>job</th>\n",
       "      <th>marital</th>\n",
       "      <th>education</th>\n",
       "      <th>default</th>\n",
       "      <th>balance</th>\n",
       "      <th>housing</th>\n",
       "      <th>loan</th>\n",
       "      <th>contact</th>\n",
       "      <th>day</th>\n",
       "      <th>month</th>\n",
       "      <th>duration</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>poutcome</th>\n",
       "      <th>Target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>58</td>\n",
       "      <td>management</td>\n",
       "      <td>married</td>\n",
       "      <td>tertiary</td>\n",
       "      <td>no</td>\n",
       "      <td>2143</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>261</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>44</td>\n",
       "      <td>technician</td>\n",
       "      <td>single</td>\n",
       "      <td>secondary</td>\n",
       "      <td>no</td>\n",
       "      <td>29</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>151</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>33</td>\n",
       "      <td>entrepreneur</td>\n",
       "      <td>married</td>\n",
       "      <td>secondary</td>\n",
       "      <td>no</td>\n",
       "      <td>2</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>76</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>47</td>\n",
       "      <td>blue-collar</td>\n",
       "      <td>married</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "      <td>1506</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>92</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>33</td>\n",
       "      <td>unknown</td>\n",
       "      <td>single</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "      <td>1</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>198</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>35</td>\n",
       "      <td>management</td>\n",
       "      <td>married</td>\n",
       "      <td>tertiary</td>\n",
       "      <td>no</td>\n",
       "      <td>231</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>139</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>28</td>\n",
       "      <td>management</td>\n",
       "      <td>single</td>\n",
       "      <td>tertiary</td>\n",
       "      <td>no</td>\n",
       "      <td>447</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>217</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>42</td>\n",
       "      <td>entrepreneur</td>\n",
       "      <td>divorced</td>\n",
       "      <td>tertiary</td>\n",
       "      <td>yes</td>\n",
       "      <td>2</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>380</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>58</td>\n",
       "      <td>retired</td>\n",
       "      <td>married</td>\n",
       "      <td>primary</td>\n",
       "      <td>no</td>\n",
       "      <td>121</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>43</td>\n",
       "      <td>technician</td>\n",
       "      <td>single</td>\n",
       "      <td>secondary</td>\n",
       "      <td>no</td>\n",
       "      <td>593</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>55</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>41</td>\n",
       "      <td>admin.</td>\n",
       "      <td>divorced</td>\n",
       "      <td>secondary</td>\n",
       "      <td>no</td>\n",
       "      <td>270</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>222</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>29</td>\n",
       "      <td>admin.</td>\n",
       "      <td>single</td>\n",
       "      <td>secondary</td>\n",
       "      <td>no</td>\n",
       "      <td>390</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>137</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>53</td>\n",
       "      <td>technician</td>\n",
       "      <td>married</td>\n",
       "      <td>secondary</td>\n",
       "      <td>no</td>\n",
       "      <td>6</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>517</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>58</td>\n",
       "      <td>technician</td>\n",
       "      <td>married</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "      <td>71</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>71</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>57</td>\n",
       "      <td>services</td>\n",
       "      <td>married</td>\n",
       "      <td>secondary</td>\n",
       "      <td>no</td>\n",
       "      <td>162</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>174</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>51</td>\n",
       "      <td>retired</td>\n",
       "      <td>married</td>\n",
       "      <td>primary</td>\n",
       "      <td>no</td>\n",
       "      <td>229</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>353</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>45</td>\n",
       "      <td>admin.</td>\n",
       "      <td>single</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "      <td>13</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>98</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>57</td>\n",
       "      <td>blue-collar</td>\n",
       "      <td>married</td>\n",
       "      <td>primary</td>\n",
       "      <td>no</td>\n",
       "      <td>52</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>38</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>60</td>\n",
       "      <td>retired</td>\n",
       "      <td>married</td>\n",
       "      <td>primary</td>\n",
       "      <td>no</td>\n",
       "      <td>60</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>219</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>33</td>\n",
       "      <td>services</td>\n",
       "      <td>married</td>\n",
       "      <td>secondary</td>\n",
       "      <td>no</td>\n",
       "      <td>0</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>unknown</td>\n",
       "      <td>5</td>\n",
       "      <td>may</td>\n",
       "      <td>54</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>unknown</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    age           job   marital  education default  balance housing loan  \\\n",
       "0    58    management   married   tertiary      no     2143     yes   no   \n",
       "1    44    technician    single  secondary      no       29     yes   no   \n",
       "2    33  entrepreneur   married  secondary      no        2     yes  yes   \n",
       "3    47   blue-collar   married    unknown      no     1506     yes   no   \n",
       "4    33       unknown    single    unknown      no        1      no   no   \n",
       "5    35    management   married   tertiary      no      231     yes   no   \n",
       "6    28    management    single   tertiary      no      447     yes  yes   \n",
       "7    42  entrepreneur  divorced   tertiary     yes        2     yes   no   \n",
       "8    58       retired   married    primary      no      121     yes   no   \n",
       "9    43    technician    single  secondary      no      593     yes   no   \n",
       "10   41        admin.  divorced  secondary      no      270     yes   no   \n",
       "11   29        admin.    single  secondary      no      390     yes   no   \n",
       "12   53    technician   married  secondary      no        6     yes   no   \n",
       "13   58    technician   married    unknown      no       71     yes   no   \n",
       "14   57      services   married  secondary      no      162     yes   no   \n",
       "15   51       retired   married    primary      no      229     yes   no   \n",
       "16   45        admin.    single    unknown      no       13     yes   no   \n",
       "17   57   blue-collar   married    primary      no       52     yes   no   \n",
       "18   60       retired   married    primary      no       60     yes   no   \n",
       "19   33      services   married  secondary      no        0     yes   no   \n",
       "\n",
       "    contact  day month  duration  campaign  pdays  previous poutcome Target  \n",
       "0   unknown    5   may       261         1     -1         0  unknown     no  \n",
       "1   unknown    5   may       151         1     -1         0  unknown     no  \n",
       "2   unknown    5   may        76         1     -1         0  unknown     no  \n",
       "3   unknown    5   may        92         1     -1         0  unknown     no  \n",
       "4   unknown    5   may       198         1     -1         0  unknown     no  \n",
       "5   unknown    5   may       139         1     -1         0  unknown     no  \n",
       "6   unknown    5   may       217         1     -1         0  unknown     no  \n",
       "7   unknown    5   may       380         1     -1         0  unknown     no  \n",
       "8   unknown    5   may        50         1     -1         0  unknown     no  \n",
       "9   unknown    5   may        55         1     -1         0  unknown     no  \n",
       "10  unknown    5   may       222         1     -1         0  unknown     no  \n",
       "11  unknown    5   may       137         1     -1         0  unknown     no  \n",
       "12  unknown    5   may       517         1     -1         0  unknown     no  \n",
       "13  unknown    5   may        71         1     -1         0  unknown     no  \n",
       "14  unknown    5   may       174         1     -1         0  unknown     no  \n",
       "15  unknown    5   may       353         1     -1         0  unknown     no  \n",
       "16  unknown    5   may        98         1     -1         0  unknown     no  \n",
       "17  unknown    5   may        38         1     -1         0  unknown     no  \n",
       "18  unknown    5   may       219         1     -1         0  unknown     no  \n",
       "19  unknown    5   may        54         1     -1         0  unknown     no  "
      ]
     },
     "execution_count": 415,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 416,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(45211, 17)"
      ]
     },
     "execution_count": 416,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 417,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 45211 entries, 0 to 45210\n",
      "Data columns (total 17 columns):\n",
      "age          45211 non-null int64\n",
      "job          45211 non-null object\n",
      "marital      45211 non-null object\n",
      "education    45211 non-null object\n",
      "default      45211 non-null object\n",
      "balance      45211 non-null int64\n",
      "housing      45211 non-null object\n",
      "loan         45211 non-null object\n",
      "contact      45211 non-null object\n",
      "day          45211 non-null int64\n",
      "month        45211 non-null object\n",
      "duration     45211 non-null int64\n",
      "campaign     45211 non-null int64\n",
      "pdays        45211 non-null int64\n",
      "previous     45211 non-null int64\n",
      "poutcome     45211 non-null object\n",
      "Target       45211 non-null object\n",
      "dtypes: int64(7), object(10)\n",
      "memory usage: 5.9+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1>Univariate Analysis</h1>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>Age</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 418,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    45211.000000\n",
       "mean        40.936210\n",
       "std         10.618762\n",
       "min         18.000000\n",
       "25%         33.000000\n",
       "50%         39.000000\n",
       "75%         48.000000\n",
       "max         95.000000\n",
       "Name: age, dtype: float64"
      ]
     },
     "execution_count": 418,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['age'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 419,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1bafe7980b8>"
      ]
     },
     "execution_count": 419,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(df['age'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 420,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1ba81b8a9b0>"
      ]
     },
     "execution_count": 420,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(df['age'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>Job</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 421,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count           45211\n",
       "unique             12\n",
       "top       blue-collar\n",
       "freq             9732\n",
       "Name: job, dtype: object"
      ]
     },
     "execution_count": 421,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['job'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 422,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1ba80023ba8>"
      ]
     },
     "execution_count": 422,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x595.44 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "a4_dims = (15, 8.27)\n",
    "fig, ax = plt.subplots(figsize=a4_dims)\n",
    "sns.countplot(df['job'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 424,
   "metadata": {},
   "outputs": [],
   "source": [
    "encoder = LabelEncoder()\n",
    "df['job_L'] = encoder.fit_transform(df['job'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>Marital</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 425,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "married     27214\n",
       "single      12790\n",
       "divorced     5207\n",
       "Name: marital, dtype: int64"
      ]
     },
     "execution_count": 425,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['marital'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 426,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1ba8033ecf8>"
      ]
     },
     "execution_count": 426,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(df['marital'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 427,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['marital_L'] = encoder.fit_transform(df['marital'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>Education</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 428,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1ba80084240>"
      ]
     },
     "execution_count": 428,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(df['education'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 429,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['education_L'] = encoder.fit_transform(df['education'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>Default</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 430,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1ba800f0e10>"
      ]
     },
     "execution_count": 430,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(df['default'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 431,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "no     44396\n",
       "yes      815\n",
       "Name: default, dtype: int64"
      ]
     },
     "execution_count": 431,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['default'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 432,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['default_L'] = encoder.fit_transform(df['default'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>Balance</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 433,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     45211.000000\n",
       "mean       1362.272058\n",
       "std        3044.765829\n",
       "min       -8019.000000\n",
       "25%          72.000000\n",
       "50%         448.000000\n",
       "75%        1428.000000\n",
       "max      102127.000000\n",
       "Name: balance, dtype: float64"
      ]
     },
     "execution_count": 433,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['balance'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 434,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1ba80150198>"
      ]
     },
     "execution_count": 434,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(df['balance'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 435,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1ba80316710>"
      ]
     },
     "execution_count": 435,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(df['balance'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>housing</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 436,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "yes    25130\n",
       "no     20081\n",
       "Name: housing, dtype: int64"
      ]
     },
     "execution_count": 436,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['housing'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 437,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1ba80291be0>"
      ]
     },
     "execution_count": 437,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(df['housing'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 438,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['housing_L'] = encoder.fit_transform(df['housing'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>Loan</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 439,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "no     37967\n",
       "yes     7244\n",
       "Name: loan, dtype: int64"
      ]
     },
     "execution_count": 439,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['loan'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 440,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1ba802ddc50>"
      ]
     },
     "execution_count": 440,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(df['loan'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 441,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['loan_L'] = encoder.fit_transform(df['loan'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>contact</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 442,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "cellular     29285\n",
       "unknown      13020\n",
       "telephone     2906\n",
       "Name: contact, dtype: int64"
      ]
     },
     "execution_count": 442,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['contact'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 443,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1ba8035af60>"
      ]
     },
     "execution_count": 443,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(df['contact'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 444,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['contact_L'] = encoder.fit_transform(df['contact'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>Day</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 445,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1ba803be080>"
      ]
     },
     "execution_count": 445,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(df['day'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>Month</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 446,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1ba80150160>"
      ]
     },
     "execution_count": 446,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(df['month'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 447,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['month_L'] = encoder.fit_transform(df['month'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>Duration</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 448,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    45211.000000\n",
       "mean       258.163080\n",
       "std        257.527812\n",
       "min          0.000000\n",
       "25%        103.000000\n",
       "50%        180.000000\n",
       "75%        319.000000\n",
       "max       4918.000000\n",
       "Name: duration, dtype: float64"
      ]
     },
     "execution_count": 448,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['duration'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 449,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1ba816c4da0>"
      ]
     },
     "execution_count": 449,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(df['duration'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# campaign"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 450,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    45211.000000\n",
       "mean         2.763841\n",
       "std          3.098021\n",
       "min          1.000000\n",
       "25%          1.000000\n",
       "50%          2.000000\n",
       "75%          3.000000\n",
       "max         63.000000\n",
       "Name: campaign, dtype: float64"
      ]
     },
     "execution_count": 450,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['campaign'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 451,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1     17544\n",
       "2     12505\n",
       "3      5521\n",
       "4      3522\n",
       "5      1764\n",
       "6      1291\n",
       "7       735\n",
       "8       540\n",
       "9       327\n",
       "10      266\n",
       "11      201\n",
       "12      155\n",
       "13      133\n",
       "14       93\n",
       "15       84\n",
       "16       79\n",
       "17       69\n",
       "18       51\n",
       "19       44\n",
       "20       43\n",
       "21       35\n",
       "22       23\n",
       "23       22\n",
       "25       22\n",
       "24       20\n",
       "28       16\n",
       "29       16\n",
       "26       13\n",
       "31       12\n",
       "27       10\n",
       "32        9\n",
       "30        8\n",
       "33        6\n",
       "34        5\n",
       "36        4\n",
       "35        4\n",
       "43        3\n",
       "38        3\n",
       "41        2\n",
       "50        2\n",
       "37        2\n",
       "51        1\n",
       "55        1\n",
       "46        1\n",
       "58        1\n",
       "44        1\n",
       "39        1\n",
       "63        1\n",
       "Name: campaign, dtype: int64"
      ]
     },
     "execution_count": 451,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['campaign'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 452,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1ba816b11d0>"
      ]
     },
     "execution_count": 452,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(df['campaign'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>pdays</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 453,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    45211.000000\n",
       "mean        40.197828\n",
       "std        100.128746\n",
       "min         -1.000000\n",
       "25%         -1.000000\n",
       "50%         -1.000000\n",
       "75%         -1.000000\n",
       "max        871.000000\n",
       "Name: pdays, dtype: float64"
      ]
     },
     "execution_count": 453,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['pdays'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 454,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-1      36954\n",
       " 182      167\n",
       " 92       147\n",
       " 183      126\n",
       " 91       126\n",
       " 181      117\n",
       " 370       99\n",
       " 184       85\n",
       " 364       77\n",
       " 95        74\n",
       " 350       73\n",
       " 94        72\n",
       " 175       71\n",
       " 185       68\n",
       " 93        65\n",
       " 343       65\n",
       " 188       64\n",
       " 189       60\n",
       " 186       60\n",
       " 174       57\n",
       " 96        57\n",
       " 349       57\n",
       " 363       55\n",
       " 97        54\n",
       " 90        54\n",
       " 196       51\n",
       " 365       51\n",
       " 368       49\n",
       " 342       49\n",
       " 98        49\n",
       "        ...  \n",
       " 774        1\n",
       " 550        1\n",
       " 396        1\n",
       " 492        1\n",
       " 466        1\n",
       " 45         1\n",
       " 434        1\n",
       " 18         1\n",
       " 529        1\n",
       " 465        1\n",
       " 401        1\n",
       " 784        1\n",
       " 656        1\n",
       " 592        1\n",
       " 528        1\n",
       " 464        1\n",
       " 432        1\n",
       " 655        1\n",
       " 495        1\n",
       " 543        1\n",
       " 47         1\n",
       " 782        1\n",
       " 686        1\n",
       " 558        1\n",
       " 526        1\n",
       " 749        1\n",
       " 717        1\n",
       " 589        1\n",
       " 493        1\n",
       " 32         1\n",
       "Name: pdays, Length: 559, dtype: int64"
      ]
     },
     "execution_count": 454,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['pdays'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 455,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1ba817e8b00>"
      ]
     },
     "execution_count": 455,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(df['pdays'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 456,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    45211.000000\n",
       "mean         0.580323\n",
       "std          2.303441\n",
       "min          0.000000\n",
       "25%          0.000000\n",
       "50%          0.000000\n",
       "75%          0.000000\n",
       "max        275.000000\n",
       "Name: previous, dtype: float64"
      ]
     },
     "execution_count": 456,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['previous'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 457,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      36954\n",
       "1       2772\n",
       "2       2106\n",
       "3       1142\n",
       "4        714\n",
       "5        459\n",
       "6        277\n",
       "7        205\n",
       "8        129\n",
       "9         92\n",
       "10        67\n",
       "11        65\n",
       "12        44\n",
       "13        38\n",
       "15        20\n",
       "14        19\n",
       "17        15\n",
       "16        13\n",
       "19        11\n",
       "23         8\n",
       "20         8\n",
       "22         6\n",
       "18         6\n",
       "24         5\n",
       "27         5\n",
       "29         4\n",
       "25         4\n",
       "21         4\n",
       "30         3\n",
       "28         2\n",
       "26         2\n",
       "37         2\n",
       "38         2\n",
       "55         1\n",
       "40         1\n",
       "35         1\n",
       "58         1\n",
       "51         1\n",
       "41         1\n",
       "32         1\n",
       "275        1\n",
       "Name: previous, dtype: int64"
      ]
     },
     "execution_count": 457,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['previous'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 458,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1ba817ad0b8>"
      ]
     },
     "execution_count": 458,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(df['previous'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# poutcome"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 459,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "unknown    36959\n",
       "failure     4901\n",
       "other       1840\n",
       "success     1511\n",
       "Name: poutcome, dtype: int64"
      ]
     },
     "execution_count": 459,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['poutcome'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 460,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1ba81cc4eb8>"
      ]
     },
     "execution_count": 460,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(df['poutcome'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 461,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['poutcome_L'] = encoder.fit_transform(df['poutcome'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Target (Output variable)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 462,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1ba81d31978>"
      ]
     },
     "execution_count": 462,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(df['Target'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 463,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "no     39922\n",
       "yes     5289\n",
       "Name: Target, dtype: int64"
      ]
     },
     "execution_count": 463,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Target'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 464,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Target_L'] = encoder.fit_transform(df['Target'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Normalize the values of columns\n",
    "2. Take care of the unknown in many columns\n",
    "3. Derive insights from univariate analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1>Normalizing and Standardizing the values in the Numerical Variables</h1>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 466,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_numeric = df[['age', 'balance', 'day','month_L','campaign', 'pdays', 'previous', 'duration']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 467,
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler1 = MinMaxScaler()\n",
    "df_numeric_normalized = scaler1.fit_transform(df_numeric)\n",
    "sacler2 = StandardScaler()\n",
    "df_numeric_standardized = scaler2.fit_transform(df_numeric)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 468,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_numeric_normalized_df = pd.DataFrame(df_numeric_normalized, columns=['age', \n",
    "                                                                        'balance', \n",
    "                                                                        'day',\n",
    "                                                                        'month_encoded_L',\n",
    "                                                                        'campaign', \n",
    "                                                                        'pdays', \n",
    "                                                                        'previous', \n",
    "                                                                        'duration']) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 469,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_numeric_standardized_df = pd.DataFrame(df_numeric_standardized, columns=['age', \n",
    "                                                                        'balance', \n",
    "                                                                        'day',\n",
    "                                                                        'month_encoded_L',\n",
    "                                                                        'campaign', \n",
    "                                                                        'pdays', \n",
    "                                                                        'previous', \n",
    "                                                                        'duration']) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1>Categorical Data</h1>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 470,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_cat = df[['job_L','marital_L','default_L','housing_L','loan_L', 'month_L', 'Target_L', 'contact_L']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 471,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>job_L</th>\n",
       "      <th>marital_L</th>\n",
       "      <th>default_L</th>\n",
       "      <th>housing_L</th>\n",
       "      <th>loan_L</th>\n",
       "      <th>month_L</th>\n",
       "      <th>Target_L</th>\n",
       "      <th>contact_L</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>45211.000000</td>\n",
       "      <td>45211.000000</td>\n",
       "      <td>45211.000000</td>\n",
       "      <td>45211.000000</td>\n",
       "      <td>45211.000000</td>\n",
       "      <td>45211.000000</td>\n",
       "      <td>45211.000000</td>\n",
       "      <td>45211.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>4.339762</td>\n",
       "      <td>1.167725</td>\n",
       "      <td>0.018027</td>\n",
       "      <td>0.555838</td>\n",
       "      <td>0.160226</td>\n",
       "      <td>5.523014</td>\n",
       "      <td>0.116985</td>\n",
       "      <td>0.640242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.272657</td>\n",
       "      <td>0.608230</td>\n",
       "      <td>0.133049</td>\n",
       "      <td>0.496878</td>\n",
       "      <td>0.366820</td>\n",
       "      <td>3.006911</td>\n",
       "      <td>0.321406</td>\n",
       "      <td>0.897951</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>7.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>11.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              job_L     marital_L     default_L     housing_L        loan_L  \\\n",
       "count  45211.000000  45211.000000  45211.000000  45211.000000  45211.000000   \n",
       "mean       4.339762      1.167725      0.018027      0.555838      0.160226   \n",
       "std        3.272657      0.608230      0.133049      0.496878      0.366820   \n",
       "min        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "25%        1.000000      1.000000      0.000000      0.000000      0.000000   \n",
       "50%        4.000000      1.000000      0.000000      1.000000      0.000000   \n",
       "75%        7.000000      2.000000      0.000000      1.000000      0.000000   \n",
       "max       11.000000      2.000000      1.000000      1.000000      1.000000   \n",
       "\n",
       "            month_L      Target_L     contact_L  \n",
       "count  45211.000000  45211.000000  45211.000000  \n",
       "mean       5.523014      0.116985      0.640242  \n",
       "std        3.006911      0.321406      0.897951  \n",
       "min        0.000000      0.000000      0.000000  \n",
       "25%        3.000000      0.000000      0.000000  \n",
       "50%        6.000000      0.000000      0.000000  \n",
       "75%        8.000000      0.000000      2.000000  \n",
       "max       11.000000      1.000000      2.000000  "
      ]
     },
     "execution_count": 471,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_cat.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>Creating 2 Intermediate DataSets with categorical and the numeric variables<h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 472,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_Normalized = pd.concat([df_cat, df_numeric_normalized_df], sort=False, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 473,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_Standardized = pd.concat([df_cat, df_numeric_standardized_df], sort=False, axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>Handling Missing values from columns - poutcome, contact, and education</h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Education</h3>\n",
    "We do not have many values in the unknown column. Hence we can simply impute the unknowns with the most common value in the column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 474,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1ba81735b00>"
      ]
     },
     "execution_count": 474,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZUAAAELCAYAAAARNxsIAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAEeVJREFUeJzt3X3QpXVdx/H3Rx5SS4dFFiOWWsd2LLJE3YCJGTVRXJgpqNGUSdmQaRsHS5uyqKlQzBnLh0asKBpXdhsTKTSpQXFjDMt82BskHlU2I9kgWFpTyMkG+vbH+d1yXM7uHm9+577us/t+zZw55/qe37nO9zoDfLge7t+VqkKSpB4eN3QDkqQDh6EiSerGUJEkdWOoSJK6MVQkSd0YKpKkbgwVSVI3hookqRtDRZLUzaFDN7DcjjrqqFq7du3QbUjSXLn++uvvr6rV+xt30IXK2rVrWVhYGLoNSZorSf5tmnEe/pIkdWOoSJK6MVQkSd0YKpKkbgwVSVI3hookqRtDRZLUjaEiSerGUJEkdXPQ/UW9lteXL/rhoVtYMb73d24eugVp5txTkSR1Y6hIkroxVCRJ3RgqkqRuDBVJUjeGiiSpG0NFktSNoSJJ6sZQkSR1Y6hIkroxVCRJ3RgqkqRuDBVJUjeGiiSpG0NFktSNoSJJ6sZQkSR1Y6hIkroxVCRJ3RgqkqRuDBVJUjeGiiSpG0NFktSNoSJJ6mZmoZLkuCQfT3J7kluTvK7Vj0yyLckd7XlVqyfJxUl2JLkpyXPG1rWxjb8jycax+nOT3Nw+c3GSzGp7JEn7N8s9lYeAX6mqHwROBs5PcjxwAXBtVa0Drm3LAKcD69pjE3AJjEIIuBA4CTgRuHAxiNqYTWOf2zDD7ZEk7cfMQqWq7qmqG9rrB4DbgWOBM4EtbdgW4Kz2+kxga418GjgiyTHAS4BtVbW7qr4CbAM2tPeeXFWfqqoCto6tS5I0gGU5p5JkLfBs4DPAU6vqHhgFD3B0G3YscNfYx3a22r7qOyfUJ33/piQLSRZ27dr1WDdHkrQXMw+VJN8FXAm8vqq+tq+hE2q1hPqji1WXVtX6qlq/evXq/bUsSVqimYZKksMYBcr7quqDrXxvO3RFe76v1XcCx419fA1w937qaybUJUkDmeXVXwHeA9xeVe8ce+sqYPEKro3Ah8fq57SrwE4GvtoOj10DnJZkVTtBfxpwTXvvgSQnt+86Z2xdkqQBHDrDdZ8CvAq4OcmNrfabwFuBK5KcB3wZeFl772rgDGAH8HXgXICq2p3kzcD2Nu6iqtrdXr8GuAx4AvCR9pAkDWRmoVJV/8jk8x4Ap04YX8D5e1nXZmDzhPoC8MzH0KYkqSP/ol6S1I2hIknqxlCRJHVjqEiSujFUJEndGCqSpG4MFUlSN4aKJKkbQ0WS1I2hIknqxlCRJHVjqEiSujFUJEndGCqSpG4MFUlSN4aKJKkbQ0WS1I2hIknqxlCRJHVjqEiSujFUJEndGCqSpG4MFUlSN4aKJKkbQ0WS1I2hIknqxlCRJHVjqEiSujFUJEndGCqSpG4MFUlSN4aKJKkbQ0WS1I2hIknqxlCRJHUzs1BJsjnJfUluGau9Mcm/J7mxPc4Ye+83kuxI8oUkLxmrb2i1HUkuGKs/LclnktyR5ANJDp/VtkiSpjPLPZXLgA0T6n9QVSe0x9UASY4HXgH8UPvMHyc5JMkhwB8BpwPHA2e3sQC/19a1DvgKcN4Mt0WSNIWZhUpVfQLYPeXwM4HLq+obVfWvwA7gxPbYUVVfqqr/BS4HzkwS4IXAX7XPbwHO6roBkqRv2xDnVF6b5KZ2eGxVqx0L3DU2Zmer7a3+FOC/quqhPeqSpAEtd6hcAjwdOAG4B3hHq2fC2FpCfaIkm5IsJFnYtWvXt9exJGlqyxoqVXVvVT1cVf8H/Bmjw1sw2tM4bmzoGuDufdTvB45Icuge9b1976VVtb6q1q9evbrPxkiSHmVZQyXJMWOLPwUsXhl2FfCKJN+R5GnAOuCzwHZgXbvS63BGJ/OvqqoCPg68tH1+I/Dh5dgGSdLeHbr/IUuT5P3AC4CjkuwELgRekOQERoeq7gR+AaCqbk1yBXAb8BBwflU93NbzWuAa4BBgc1Xd2r7i14HLk/wu8DngPbPaFknSdGYWKlV19oTyXv/DX1VvAd4yoX41cPWE+pd45PCZJGkF8C/qJUndGCqSpG4MFUlSN4aKJKkbQ0WS1I2hIknqxlCRJHVjqEiSupkqVJJcO01NknRw2+df1Cd5PPBERlOtrOKR2YGfDHzPjHuTJM2Z/U3T8gvA6xkFyPU8EipfY3RHRknL5JR3nzJ0CyvGJ3/xk0O3oL3YZ6hU1buAdyX5xap69zL1JEmaU1NNKFlV707yY8Da8c9U1dYZ9SVJmkNThUqSP2d0x8YbgYdbuQBDRZL0TdNOfb8eOL7dHEuSpImm/TuVW4DvnmUjkqT5N+2eylHAbUk+C3xjsVhVPzmTriRJc2naUHnjLJuQJB0Ypr3667pZNyJJmn/TXv31AKOrvQAOBw4D/ruqnjyrxiRJ82faPZUnjS8nOQs4cSYdSZLm1pJmKa6qvwZe2LkXSdKcm/bw10+PLT6O0d+t+DcrkqRvMe3VXz8x9voh4E7gzO7dSJLm2rTnVM6ddSOSpPk37U261iT5UJL7ktyb5Moka2bdnCRpvkx7ov69wFWM7qtyLPA3rSZJ0jdNGyqrq+q9VfVQe1wGrJ5hX5KkOTRtqNyf5JVJDmmPVwL/OcvGJEnzZ9pQeTXwM8B/APcALwU8eS9J+hbTXlL8ZmBjVX0FIMmRwNsZhY0kScD0eyo/shgoAFW1G3j2bFqSJM2raUPlcUlWLS60PZVp93IkSQeJaYPhHcA/JfkrRtOz/Azwlpl1JUmaS9P+Rf3WJAuMJpEM8NNVddtMO5MkzZ2pD2G1EDFIJEl7taSp76eRZHOb1uWWsdqRSbYluaM9r2r1JLk4yY4kNyV5zthnNrbxdyTZOFZ/bpKb22cuTpJZbYskaTozCxXgMmDDHrULgGurah1wbVsGOB1Y1x6bgEvgmxcEXAicxOimYBeOXTBwSRu7+Lk9v0uStMxmFipV9Qlg9x7lM4Et7fUW4Kyx+tYa+TRwRJJjgJcA26pqd7ukeRuwob335Kr6VFUVsHVsXZKkgcxyT2WSp1bVPQDt+ehWPxa4a2zczlbbV33nhLokaUDLHSp7M+l8SC2hPnnlyaYkC0kWdu3atcQWJUn7s9yhcm87dEV7vq/VdwLHjY1bA9y9n/qaCfWJqurSqlpfVetXr3ZyZUmaleUOlauAxSu4NgIfHquf064COxn4ajs8dg1wWpJV7QT9acA17b0Hkpzcrvo6Z2xdkqSBzGyqlSTvB14AHJVkJ6OruN4KXJHkPODLwMva8KuBM4AdwNdpMyBX1e4kbwa2t3EXtXnHAF7D6AqzJwAfaQ9J0oBmFipVdfZe3jp1wtgCzt/LejYDmyfUF4BnPpYeJUl9rZQT9ZKkA4ChIknqxlCRJHVjqEiSujFUJEndGCqSpG4MFUlSN4aKJKkbQ0WS1I2hIknqxlCRJHVjqEiSujFUJEndGCqSpG4MFUlSN4aKJKkbQ0WS1I2hIknqxlCRJHVjqEiSujFUJEndGCqSpG4MFUlSN4cO3cBK89w3bB26hRXj+redM3QLkuaMeyqSpG4MFUlSN4aKJKkbQ0WS1I2hIknqxlCRJHVjqEiSujFUJEndGCqSpG4MFUlSN4aKJKkbQ0WS1M0goZLkziQ3J7kxyUKrHZlkW5I72vOqVk+Si5PsSHJTkueMrWdjG39Hko1DbIsk6RFD7qn8eFWdUFXr2/IFwLVVtQ64ti0DnA6sa49NwCUwCiHgQuAk4ETgwsUgkiQNYyUd/joT2NJebwHOGqtvrZFPA0ckOQZ4CbCtqnZX1VeAbcCG5W5akvSIoUKlgI8luT7JplZ7alXdA9Cej271Y4G7xj67s9X2Vn+UJJuSLCRZ2LVrV8fNkCSNG+omXadU1d1Jjga2Jfn8PsZmQq32UX90sepS4FKA9evXTxwjSXrsBtlTqaq72/N9wIcYnRO5tx3Woj3f14bvBI4b+/ga4O591CVJA1n2UEnynUmetPgaOA24BbgKWLyCayPw4fb6KuCcdhXYycBX2+Gxa4DTkqxqJ+hPazVJ0kCGOPz1VOBDSRa//y+q6qNJtgNXJDkP+DLwsjb+auAMYAfwdeBcgKraneTNwPY27qKq2r18myFJ2tOyh0pVfQl41oT6fwKnTqgXcP5e1rUZ2Ny7R0nS0qykS4olSXPOUJEkdWOoSJK6MVQkSd0YKpKkbgwVSVI3hookqRtDRZLUjaEiSerGUJEkdWOoSJK6MVQkSd0YKpKkbgwVSVI3hookqRtDRZLUjaEiSerGUJEkdWOoSJK6MVQkSd0YKpKkbgwVSVI3hw7dgCQN4brnPX/oFlaM53/ium7rck9FktSNoSJJ6sZQkSR1Y6hIkroxVCRJ3RgqkqRuDBVJUjeGiiSpG0NFktSNoSJJ6sZQkSR1Y6hIkrqZ+1BJsiHJF5LsSHLB0P1I0sFsrkMlySHAHwGnA8cDZyc5ftiuJOngNdehApwI7KiqL1XV/wKXA2cO3JMkHbTmPVSOBe4aW97ZapKkAcz7TboyoVaPGpRsAja1xQeTfGGmXfVxFHD/kA3k7RuH/PqeBv8tAbhw0j+uc2nw3zO/dMD8lrACfk8y1e/5fdMMmvdQ2QkcN7a8Brh7z0FVdSlw6XI11UOShapaP3QfBwJ/y778Pfs60H7PeT/8tR1Yl+RpSQ4HXgFcNXBPknTQmus9lap6KMlrgWuAQ4DNVXXrwG1J0kFrrkMFoKquBq4euo8ZmKvDdSucv2Vf/p59HVC/Z6oedV5bkqQlmfdzKpKkFcRQWWGcdqafJJuT3JfklqF7ORAkOS7Jx5PcnuTWJK8buqd5leTxST6b5J/bb/mmoXvqxcNfK0ibduaLwIsZXS69HTi7qm4btLE5leR5wIPA1qp65tD9zLskxwDHVNUNSZ4EXA+c5T+f374kAb6zqh5Mchjwj8DrqurTA7f2mLmnsrI47UxHVfUJYPfQfRwoquqeqrqhvX4AuB1nsFiSGnmwLR7WHgfE/+EbKiuL085oLiRZCzwb+MywncyvJIckuRG4D9hWVQfEb2morCxTTTsjDSnJdwFXAq+vqq8N3c+8qqqHq+oERjOBnJjkgDhEa6isLFNNOyMNpR3/vxJ4X1V9cOh+DgRV9V/A3wMbBm6lC0NlZXHaGa1Y7eTye4Dbq+qdQ/czz5KsTnJEe/0E4EXA54ftqg9DZQWpqoeAxWlnbgeucNqZpUvyfuBTwDOS7Exy3tA9zblTgFcBL0xyY3ucMXRTc+oY4ONJbmL0P5PbqupvB+6pCy8pliR1456KJKkbQ0WS1I2hIknqxlCRJHVjqEiSujFUJEndGCrSEiX5uSR/2HmdZyU5fmz5oiQv6rj+7j1L4wwVaWU5C/hmqFTV71TV3w3Yj/RtMVSkvUjyynYjpRuT/GmbVfbcJF9Mch2jvzBfHHtZkpeOLT849vrXktzcbsj01lb7+STbW+3KJE9M8mPATwJva9/59PH1Jjk1yefaujYn+Y5WvzPJm5Lc0N77gWX6iaRHMVSkCZL8IPBy4JQ2k+zDwCuBNzEKkxcztkexj/Wczmjv46Sqehbw++2tD1bVj7ba7cB5VfVPjOZ6e0NVnVBV/zK2nscDlwEvr6ofBg4FXjP2VfdX1XOAS4BfXfqWS4+NoSJNdirwXGB7u+fFqcAvA39fVbvaTdQ+MMV6XgS8t6q+DlBVizcNe2aSf0hyM/CzwA/tZz3PAP61qr7YlrcAzxt7f3HG4OuBtVP0Jc2EoSJNFmBL22M4oaqeAbyRvd/f5iHav09tNt/Dx9Yz6TOXAa9tex1vAh4/RT/78o32/DCjvRhpEIaKNNm1wEuTHA2Q5Ejgc8ALkjyl3VfkZWPj72S0ZwOjW0Af1l5/DHh1kieOrQfgScA9bT0/O7aeB9p7e/o8sDbJ97flVwHXLX3zpNkwVKQJquo24LeAj7Xpybcxmq78jYym0/874Iaxj/wZ8PwknwVOAv67reejjM6TLLTDaIvnO36b0a14t/Gt99G4HHhDOyH/9LF+/gc4F/jLdsjs/4A/WeLm/Vy7FcDiY80S1yM9ilPfS5K6cU9FktSNJ/SkA1CSc4HX7VH+ZFWdP0Q/Onh4+EuS1I2HvyRJ3RgqkqRuDBVJUjeGiiSpG0NFktTN/wPfIKO1qt5M9AAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(df['education_L'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 475,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SimpleImputer(add_indicator=False, copy=True, fill_value=None, missing_values=3,\n",
       "              strategy='most_frequent', verbose=0)"
      ]
     },
     "execution_count": 475,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imputer = SimpleImputer(missing_values=3, strategy=\"most_frequent\")\n",
    "imputer.fit(np.array(df['education_L']).reshape(-1,1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 476,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = imputer.transform(np.array(df['education_L']).reshape(-1,1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 477,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['education_L_imputed'] = pd.Series(x.flatten())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 478,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1ba820e6a90>"
      ]
     },
     "execution_count": 478,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(df['education_L_imputed'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>Appending the new education column to the 2 datasets</b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 479,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_Normalized['education_L_imputed'] = df['education_L_imputed']\n",
    "df_Standardized['education_L_imputed'] = df['education_L_imputed']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>poutcome</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 480,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1ba8230fe80>"
      ]
     },
     "execution_count": 480,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(df['poutcome_L'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 481,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1. Adding the poutcome column to the df_Normalized\n",
    "df_Normalized['poutcome_L'] = df['poutcome_L']\n",
    "df_Standardized['poutcome_L'] = df['poutcome_L']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 482,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>job_L</th>\n",
       "      <th>marital_L</th>\n",
       "      <th>default_L</th>\n",
       "      <th>housing_L</th>\n",
       "      <th>loan_L</th>\n",
       "      <th>month_L</th>\n",
       "      <th>Target_L</th>\n",
       "      <th>contact_L</th>\n",
       "      <th>age</th>\n",
       "      <th>balance</th>\n",
       "      <th>day</th>\n",
       "      <th>month_encoded_L</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>duration</th>\n",
       "      <th>education_L_imputed</th>\n",
       "      <th>poutcome_L</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>24060</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.194805</td>\n",
       "      <td>0.080811</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.909091</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.174312</td>\n",
       "      <td>0.010909</td>\n",
       "      <td>0.007930</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24062</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.311688</td>\n",
       "      <td>0.070561</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.909091</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.191514</td>\n",
       "      <td>0.003636</td>\n",
       "      <td>0.105531</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24064</th>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.194805</td>\n",
       "      <td>0.104071</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.909091</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.105505</td>\n",
       "      <td>0.014545</td>\n",
       "      <td>0.029280</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24072</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.233766</td>\n",
       "      <td>0.094729</td>\n",
       "      <td>0.700000</td>\n",
       "      <td>0.909091</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.099771</td>\n",
       "      <td>0.014545</td>\n",
       "      <td>0.014843</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24077</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.233766</td>\n",
       "      <td>0.072803</td>\n",
       "      <td>0.733333</td>\n",
       "      <td>0.909091</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.165138</td>\n",
       "      <td>0.010909</td>\n",
       "      <td>0.028467</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       job_L  marital_L  default_L  housing_L  loan_L  month_L  Target_L  \\\n",
       "24060      0          1          0          0       0       10         0   \n",
       "24062      0          2          0          1       1       10         1   \n",
       "24064      7          1          0          1       0       10         1   \n",
       "24072      4          1          0          1       0       10         0   \n",
       "24077      4          1          0          1       0       10         1   \n",
       "\n",
       "       contact_L       age   balance       day  month_encoded_L  campaign  \\\n",
       "24060          1  0.194805  0.080811  0.666667         0.909091       0.0   \n",
       "24062          1  0.311688  0.070561  0.666667         0.909091       0.0   \n",
       "24064          1  0.194805  0.104071  0.666667         0.909091       0.0   \n",
       "24072          1  0.233766  0.094729  0.700000         0.909091       0.0   \n",
       "24077          1  0.233766  0.072803  0.733333         0.909091       0.0   \n",
       "\n",
       "          pdays  previous  duration  education_L_imputed  poutcome_L  \n",
       "24060  0.174312  0.010909  0.007930                    2           0  \n",
       "24062  0.191514  0.003636  0.105531                    1           1  \n",
       "24064  0.105505  0.014545  0.029280                    1           0  \n",
       "24072  0.099771  0.014545  0.014843                    2           1  \n",
       "24077  0.165138  0.010909  0.028467                    2           0  "
      ]
     },
     "execution_count": 482,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_Normalized[df_Normalized['poutcome_L']!=3].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 483,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8252, 18)"
      ]
     },
     "execution_count": 483,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_Normalized[df_Normalized['poutcome_L']!=3].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 484,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train = df_Normalized[df_Normalized['poutcome_L']!=3].iloc[:,0:17]\n",
    "y_train = df_Normalized[df_Normalized['poutcome_L']!=3]['poutcome_L']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 485,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test = df_Normalized[df_Normalized['poutcome_L']==3].iloc[:,0:17]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 486,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(8252, 17)\n",
      "(8252,)\n",
      "(36959, 17)\n"
     ]
    }
   ],
   "source": [
    "for i in [X_train, y_train, X_test]:\n",
    "    print(i.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 487,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "                     metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n",
       "                     weights='distance')"
      ]
     },
     "execution_count": 487,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "NNH = KNeighborsClassifier(n_neighbors = 5, weights = 'distance')\n",
    "NNH.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 488,
   "metadata": {},
   "outputs": [],
   "source": [
    "predicted_labels = NNH.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 489,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1ba82343e48>"
      ]
     },
     "execution_count": 489,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(pd.Series(predicted_labels))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 490,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_Normalized_full = pd.concat([df_Normalized[df_Normalized['poutcome_L']!=3], df_Normalized[df_Normalized['poutcome_L']==3]]).reset_index(drop=True)\n",
    "df_Standardized_full = pd.concat([df_Standardized[df_Standardized['poutcome_L']!=3], df_Standardized[df_Standardized['poutcome_L']==3]]).reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 491,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_Normalized_full['poutcome_complete'] = pd.concat([df_Normalized[df_Normalized['poutcome_L']!=3]['poutcome_L'], pd.Series(predicted_labels)]).reset_index(drop=True)\n",
    "df_Standardized_full['poutcome_complete'] = pd.concat([df_Standardized[df_Standardized['poutcome_L']!=3]['poutcome_L'], pd.Series(predicted_labels)]).reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 492,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_Standardized_full.drop('poutcome_L', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 493,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(45211, 18)"
      ]
     },
     "execution_count": 493,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_Standardized_full.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 494,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(45211, 19)"
      ]
     },
     "execution_count": 494,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_Normalized_full.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 495,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>job_L</th>\n",
       "      <th>marital_L</th>\n",
       "      <th>default_L</th>\n",
       "      <th>housing_L</th>\n",
       "      <th>loan_L</th>\n",
       "      <th>month_L</th>\n",
       "      <th>Target_L</th>\n",
       "      <th>contact_L</th>\n",
       "      <th>age</th>\n",
       "      <th>balance</th>\n",
       "      <th>day</th>\n",
       "      <th>month_encoded_L</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>duration</th>\n",
       "      <th>education_L_imputed</th>\n",
       "      <th>poutcome_L</th>\n",
       "      <th>poutcome_complete</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.194805</td>\n",
       "      <td>0.080811</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.909091</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.174312</td>\n",
       "      <td>0.010909</td>\n",
       "      <td>0.007930</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.311688</td>\n",
       "      <td>0.070561</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.909091</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.191514</td>\n",
       "      <td>0.003636</td>\n",
       "      <td>0.105531</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.194805</td>\n",
       "      <td>0.104071</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.909091</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.105505</td>\n",
       "      <td>0.014545</td>\n",
       "      <td>0.029280</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.233766</td>\n",
       "      <td>0.094729</td>\n",
       "      <td>0.700000</td>\n",
       "      <td>0.909091</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.099771</td>\n",
       "      <td>0.014545</td>\n",
       "      <td>0.014843</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.233766</td>\n",
       "      <td>0.072803</td>\n",
       "      <td>0.733333</td>\n",
       "      <td>0.909091</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.165138</td>\n",
       "      <td>0.010909</td>\n",
       "      <td>0.028467</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   job_L  marital_L  default_L  housing_L  loan_L  month_L  Target_L  \\\n",
       "0      0          1          0          0       0       10         0   \n",
       "1      0          2          0          1       1       10         1   \n",
       "2      7          1          0          1       0       10         1   \n",
       "3      4          1          0          1       0       10         0   \n",
       "4      4          1          0          1       0       10         1   \n",
       "\n",
       "   contact_L       age   balance       day  month_encoded_L  campaign  \\\n",
       "0          1  0.194805  0.080811  0.666667         0.909091       0.0   \n",
       "1          1  0.311688  0.070561  0.666667         0.909091       0.0   \n",
       "2          1  0.194805  0.104071  0.666667         0.909091       0.0   \n",
       "3          1  0.233766  0.094729  0.700000         0.909091       0.0   \n",
       "4          1  0.233766  0.072803  0.733333         0.909091       0.0   \n",
       "\n",
       "      pdays  previous  duration  education_L_imputed  poutcome_L  \\\n",
       "0  0.174312  0.010909  0.007930                    2           0   \n",
       "1  0.191514  0.003636  0.105531                    1           1   \n",
       "2  0.105505  0.014545  0.029280                    1           0   \n",
       "3  0.099771  0.014545  0.014843                    2           1   \n",
       "4  0.165138  0.010909  0.028467                    2           0   \n",
       "\n",
       "   poutcome_complete  \n",
       "0                  0  \n",
       "1                  1  \n",
       "2                  0  \n",
       "3                  1  \n",
       "4                  0  "
      ]
     },
     "execution_count": 495,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_Normalized_full.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 496,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>job_L</th>\n",
       "      <th>marital_L</th>\n",
       "      <th>default_L</th>\n",
       "      <th>housing_L</th>\n",
       "      <th>loan_L</th>\n",
       "      <th>month_L</th>\n",
       "      <th>Target_L</th>\n",
       "      <th>contact_L</th>\n",
       "      <th>age</th>\n",
       "      <th>balance</th>\n",
       "      <th>day</th>\n",
       "      <th>month_encoded_L</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>duration</th>\n",
       "      <th>education_L_imputed</th>\n",
       "      <th>poutcome_complete</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.747384</td>\n",
       "      <td>-0.157739</td>\n",
       "      <td>0.624050</td>\n",
       "      <td>1.488915</td>\n",
       "      <td>-0.569351</td>\n",
       "      <td>1.106609</td>\n",
       "      <td>1.050473</td>\n",
       "      <td>-0.851036</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.100181</td>\n",
       "      <td>-0.528543</td>\n",
       "      <td>0.624050</td>\n",
       "      <td>1.488915</td>\n",
       "      <td>-0.569351</td>\n",
       "      <td>1.256418</td>\n",
       "      <td>0.182198</td>\n",
       "      <td>1.012861</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.747384</td>\n",
       "      <td>0.683715</td>\n",
       "      <td>0.624050</td>\n",
       "      <td>1.488915</td>\n",
       "      <td>-0.569351</td>\n",
       "      <td>0.507374</td>\n",
       "      <td>1.484611</td>\n",
       "      <td>-0.443309</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.464863</td>\n",
       "      <td>0.345754</td>\n",
       "      <td>0.744208</td>\n",
       "      <td>1.488915</td>\n",
       "      <td>-0.569351</td>\n",
       "      <td>0.457438</td>\n",
       "      <td>1.484611</td>\n",
       "      <td>-0.719010</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.464863</td>\n",
       "      <td>-0.447419</td>\n",
       "      <td>0.864365</td>\n",
       "      <td>1.488915</td>\n",
       "      <td>-0.569351</td>\n",
       "      <td>1.026711</td>\n",
       "      <td>1.050473</td>\n",
       "      <td>-0.458841</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   job_L  marital_L  default_L  housing_L  loan_L  month_L  Target_L  \\\n",
       "0      0          1          0          0       0       10         0   \n",
       "1      0          2          0          1       1       10         1   \n",
       "2      7          1          0          1       0       10         1   \n",
       "3      4          1          0          1       0       10         0   \n",
       "4      4          1          0          1       0       10         1   \n",
       "\n",
       "   contact_L       age   balance       day  month_encoded_L  campaign  \\\n",
       "0          1 -0.747384 -0.157739  0.624050         1.488915 -0.569351   \n",
       "1          1  0.100181 -0.528543  0.624050         1.488915 -0.569351   \n",
       "2          1 -0.747384  0.683715  0.624050         1.488915 -0.569351   \n",
       "3          1 -0.464863  0.345754  0.744208         1.488915 -0.569351   \n",
       "4          1 -0.464863 -0.447419  0.864365         1.488915 -0.569351   \n",
       "\n",
       "      pdays  previous  duration  education_L_imputed  poutcome_complete  \n",
       "0  1.106609  1.050473 -0.851036                    2                  0  \n",
       "1  1.256418  0.182198  1.012861                    1                  1  \n",
       "2  0.507374  1.484611 -0.443309                    1                  0  \n",
       "3  0.457438  1.484611 -0.719010                    2                  1  \n",
       "4  1.026711  1.050473 -0.458841                    2                  0  "
      ]
     },
     "execution_count": 496,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_Standardized_full.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>Now we have 2 datasets fit for further processing:</h4>\n",
    "<ol>\n",
    "    <li>df_Normalized_full</li>\n",
    "    <li>df_Standardized_full</li>\n",
    "</ol>\n",
    "\n",
    "<h4>We have made the following transformations</h4>\n",
    "\n",
    "<ul>\n",
    "    <li>Label Encoded the categorical variables</li>\n",
    "    <li>Standardized and Normalized the numerical variables and created 2 datasets</li>\n",
    "    <li>Imputed the missing values in 2 variables - poutcome and Education.(Contact has been left as such)</li>\n",
    "</ul>\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1>Preparing the 2 datasets for Random Forests with OneHotEncoding</h1>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
